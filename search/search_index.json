{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Simurgh Simugh pronounced Seymour is a project that aims to develop a research-focused open source simulation platform, along with a user-friendly interface for evaluating different machine learning algorithms for real-time decision-making, from optimisation approaches to reinforcement learning, in a complex and uncertain environment. Air traffic control is a complex task requiring real-time planning under uncertainty, predicting potential conflicts and issuing commands to aircraft pilots to ensure safety. This project investigates machine learning methods that can be applied to this domain and could in future help air traffic controllers in effective decision-making. Using simulations similar to training scenarios for actual air traffic controllers, the project builds an open experimentation platform to evaluate possible machine learning approaches to this task, and explores algorithms to 'play' the simulation in the role of air traffic controllers. The Simurgh project contains several elements that all work together to achieve the aims laid out above; these are: Bluesky - open source air traffic simulator Bluebird - server that handles communication between Bluesky and air traffic control agents Twitcher - front-end for monitoring the simulation Dodo - scaffolds for ATC agents in Python, R, and potentially other languages NATS birdhouse - some ATC agents (currently in Python) Quick Start In order to get things up and running, it is important to emphasise the dependencies tree of the packages outlined above. If one has Docker install, perhaps the most \"hassle free\" option would be to run: $$ docker-compose up -d which will pull down the pre-built images from DockerHub and start each container in order. Then all one needs to do is go to http://localhost:8080 where Twitcher will be running. Note : If this is the first time running this command, it may take some time to download and extract all the layers involved. Then to close this, running: $$ docker-compose down will shutdown the running instances. Alternatively, if one would like to get up and running fairly quickly, but without Docker, this set of commands will install all dependencies and start the application by running: $$ git clone --recurse-submodules -j8 git@github.com:alan-turing-institute/simurgh.git $$ source install.sh This will create a conda environment call nats and install all necessary dependencies required. A full step-by-step installation guide can be found here at the installation page.","title":"Home"},{"location":"#welcome-to-simurgh","text":"Simugh pronounced Seymour is a project that aims to develop a research-focused open source simulation platform, along with a user-friendly interface for evaluating different machine learning algorithms for real-time decision-making, from optimisation approaches to reinforcement learning, in a complex and uncertain environment. Air traffic control is a complex task requiring real-time planning under uncertainty, predicting potential conflicts and issuing commands to aircraft pilots to ensure safety. This project investigates machine learning methods that can be applied to this domain and could in future help air traffic controllers in effective decision-making. Using simulations similar to training scenarios for actual air traffic controllers, the project builds an open experimentation platform to evaluate possible machine learning approaches to this task, and explores algorithms to 'play' the simulation in the role of air traffic controllers. The Simurgh project contains several elements that all work together to achieve the aims laid out above; these are: Bluesky - open source air traffic simulator Bluebird - server that handles communication between Bluesky and air traffic control agents Twitcher - front-end for monitoring the simulation Dodo - scaffolds for ATC agents in Python, R, and potentially other languages NATS birdhouse - some ATC agents (currently in Python)","title":"Welcome to Simurgh"},{"location":"#quick-start","text":"In order to get things up and running, it is important to emphasise the dependencies tree of the packages outlined above. If one has Docker install, perhaps the most \"hassle free\" option would be to run: $$ docker-compose up -d which will pull down the pre-built images from DockerHub and start each container in order. Then all one needs to do is go to http://localhost:8080 where Twitcher will be running. Note : If this is the first time running this command, it may take some time to download and extract all the layers involved. Then to close this, running: $$ docker-compose down will shutdown the running instances. Alternatively, if one would like to get up and running fairly quickly, but without Docker, this set of commands will install all dependencies and start the application by running: $$ git clone --recurse-submodules -j8 git@github.com:alan-turing-institute/simurgh.git $$ source install.sh This will create a conda environment call nats and install all necessary dependencies required. A full step-by-step installation guide can be found here at the installation page.","title":"Quick Start"},{"location":"install/","text":"As mentioned previously the dependency flow is quite important and as such one needs to have Bluesky running before Bluebird can operate. Furthermore Twitcher and DoDo require Bluebird to be running in order for them to work. Therefore, to get things up and running, the installation is advised to be done sequentially as laid out in the sections below Bluesky Original instructions can be found at TUDelft-CNS-ATM/bluesky wiki However, it has been found to be much easier to have a single conda environment.yml file instead # This file may be used to create an environment using: # $ conda env create --name <env> --file <this file> # platform: linux-64 name: nats channels: - conda-forge dependencies: - python=3.6 - pyqt - numpy - scipy - matplotlib - pandas - r-base - pip: - flask - flask_cors - flask_restful - markdown - msgpack - python-dotenv - pyzmq - pygame - pyproj # birdhouse dep - pyqtwebengine - pyopengl - pyopengl-accelerate - psutil==5.5.* - pytest==4.1.* - pylint==2.2.* - pylint-exit==1.0.* In the simurgh/ directory, one can create the desired conda environment with the commands below: conda env create -q && conda activate nats Now that dependencies are installed for both Bluesky & Bluebird, we can at least check that these are OK by running check.py inside the Bluesky repository. Running python bluesky/check.py will produce the following output: (nats) $$ python bluesky/check.py This script checks the availability of the libraries required by BlueSky, and the capabilities of your system. Checking for numpy [OK] Checking for scipy [OK] Checking for matplotlib [OK] Checking for pyqt [QT5] Checking for pyopengl [OK] OpenGL module version is [3.1.0] Checking GL capabilities [OK] GL Version at least 3.3 [OK] Supported GL version [4.1] Checking for pygame pygame 1.9.6 Hello from the pygame community. https://www.pygame.org/contribute.html [OK] You have all the required libraries to run BlueSky. You can use both the QTGL and the pygame versions. Checking bluesky modules StateBasedCD: using Python version. Could not import pyclipper, RESO SSD will not function Using Open Aircraft Performance (OpenAP) model Successfully loaded all BlueSky modules. Start BlueSky by running BlueSky.py. The above command only checks the dependencies for Bluesky, if it was indeed successful, we can now install Bluesky into the Python path with: (nats) $$ pip install bluesky/ From here, all the necessary items should be installed, Bluesky can now be launched with: (nats) $$ cd bluesky && python Bluesky.py The above command will start the Bluesky simulator with the default GUI which looks like: If one would like to run Bluesky without the default GUI, a headless version is available with the command: (nats) $$ cd bluesky && python Bluesky.py --headless If perhaps the user wished to connect the running instance to a remote host this can be done with: (nats) $$ cd bluesky && python BlueSky.py --client --bluesky_host=1.2.3.4 This will skip discovery and attempt a connection to the specified host (using the default ports) Now that the instance of the simulator is up and running and connected to the desired ports, one can now spin up Bluebird, which is the interface layer between the simulator and the AI agents. Bluebird If Bluesky was installed successfully, then it should be as simple as running: (nats) $$ cd bluebird && python run.py This should produce the following output: 2019-08-08 18:08:31 INFO bluebird.bluebird: Connecting to client... Client 0b06b30f connected to host 5dd3f7f1 of version 1.2.1 2019-08-08 18:08:41 INFO bluebird.cache.sim_state: speed=0x, ticks= 0, time=, state=INIT, aircraft=0 2019-08-08 18:08:41 INFO bluebird.cache.sim_state: Logging started. Initial SIM_LOG_RATE=0.2 Client active node changed. * Serving Flask app \"bluebird.api\" (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on * Running on http://0.0.0.0:5001/ (Press CTRL+C to quit) 2019-08-08 18:08:46 INFO bluebird.cache.sim_state: speed=0.0x, ticks= 0, time=00:00:00, state=INIT, aircraft=0 Now we have the simulator running, and the interface that sits on top up and running, we can now connect our AI agents. DoDo Assuming one has cloned simurgh along with all submodules, it should be the case one can then install Pydodo with: cd dodo/Pydodo pip install . Then to check if this worked: >>> import pydodo >>> >>> pydodo.reset_simulation() True >>> Success! Birdhouse Birdhouse requires Bluesky and Bluebird to both be running in order to get working. >>> import pydodo >>> pydodo.all_positions() Empty DataFrame Columns: [altitude, ground_speed, latitude, longitude, vertical_speed] Index: [] python run.py default_input_agents_read_scn.ini Twitcher (Optional)","title":"Installation"},{"location":"install/#bluesky","text":"Original instructions can be found at TUDelft-CNS-ATM/bluesky wiki However, it has been found to be much easier to have a single conda environment.yml file instead # This file may be used to create an environment using: # $ conda env create --name <env> --file <this file> # platform: linux-64 name: nats channels: - conda-forge dependencies: - python=3.6 - pyqt - numpy - scipy - matplotlib - pandas - r-base - pip: - flask - flask_cors - flask_restful - markdown - msgpack - python-dotenv - pyzmq - pygame - pyproj # birdhouse dep - pyqtwebengine - pyopengl - pyopengl-accelerate - psutil==5.5.* - pytest==4.1.* - pylint==2.2.* - pylint-exit==1.0.* In the simurgh/ directory, one can create the desired conda environment with the commands below: conda env create -q && conda activate nats Now that dependencies are installed for both Bluesky & Bluebird, we can at least check that these are OK by running check.py inside the Bluesky repository. Running python bluesky/check.py will produce the following output: (nats) $$ python bluesky/check.py This script checks the availability of the libraries required by BlueSky, and the capabilities of your system. Checking for numpy [OK] Checking for scipy [OK] Checking for matplotlib [OK] Checking for pyqt [QT5] Checking for pyopengl [OK] OpenGL module version is [3.1.0] Checking GL capabilities [OK] GL Version at least 3.3 [OK] Supported GL version [4.1] Checking for pygame pygame 1.9.6 Hello from the pygame community. https://www.pygame.org/contribute.html [OK] You have all the required libraries to run BlueSky. You can use both the QTGL and the pygame versions. Checking bluesky modules StateBasedCD: using Python version. Could not import pyclipper, RESO SSD will not function Using Open Aircraft Performance (OpenAP) model Successfully loaded all BlueSky modules. Start BlueSky by running BlueSky.py. The above command only checks the dependencies for Bluesky, if it was indeed successful, we can now install Bluesky into the Python path with: (nats) $$ pip install bluesky/ From here, all the necessary items should be installed, Bluesky can now be launched with: (nats) $$ cd bluesky && python Bluesky.py The above command will start the Bluesky simulator with the default GUI which looks like: If one would like to run Bluesky without the default GUI, a headless version is available with the command: (nats) $$ cd bluesky && python Bluesky.py --headless If perhaps the user wished to connect the running instance to a remote host this can be done with: (nats) $$ cd bluesky && python BlueSky.py --client --bluesky_host=1.2.3.4 This will skip discovery and attempt a connection to the specified host (using the default ports) Now that the instance of the simulator is up and running and connected to the desired ports, one can now spin up Bluebird, which is the interface layer between the simulator and the AI agents.","title":"Bluesky"},{"location":"install/#bluebird","text":"If Bluesky was installed successfully, then it should be as simple as running: (nats) $$ cd bluebird && python run.py This should produce the following output: 2019-08-08 18:08:31 INFO bluebird.bluebird: Connecting to client... Client 0b06b30f connected to host 5dd3f7f1 of version 1.2.1 2019-08-08 18:08:41 INFO bluebird.cache.sim_state: speed=0x, ticks= 0, time=, state=INIT, aircraft=0 2019-08-08 18:08:41 INFO bluebird.cache.sim_state: Logging started. Initial SIM_LOG_RATE=0.2 Client active node changed. * Serving Flask app \"bluebird.api\" (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on * Running on http://0.0.0.0:5001/ (Press CTRL+C to quit) 2019-08-08 18:08:46 INFO bluebird.cache.sim_state: speed=0.0x, ticks= 0, time=00:00:00, state=INIT, aircraft=0 Now we have the simulator running, and the interface that sits on top up and running, we can now connect our AI agents.","title":"Bluebird"},{"location":"install/#dodo","text":"Assuming one has cloned simurgh along with all submodules, it should be the case one can then install Pydodo with: cd dodo/Pydodo pip install . Then to check if this worked: >>> import pydodo >>> >>> pydodo.reset_simulation() True >>> Success!","title":"DoDo"},{"location":"install/#birdhouse","text":"Birdhouse requires Bluesky and Bluebird to both be running in order to get working. >>> import pydodo >>> pydodo.all_positions() Empty DataFrame Columns: [altitude, ground_speed, latitude, longitude, vertical_speed] Index: [] python run.py default_input_agents_read_scn.ini","title":"Birdhouse"},{"location":"install/#twitcher-optional","text":"","title":"Twitcher (Optional)"},{"location":"releases/","text":"Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Danger This is a note Tip This is a tip This is an admonition box without a title. This is the example for Caution admonition. Caution This is the example for Caution admonition. Note On a few known hosts (specifically GitHub, Bitbucket and GitLab), the edit_uri is derived from the 'repo_url' and does not need to be set manually. Simply defining a repo_url will automatically populate the edit_uri configs setting. For example, for a GitHub- or GitLab-hosted repository, the edit_uri would be automatically set as edit/master/docs/ (Note the edit path and master branch). For a Bitbucket-hosted repository, the equivalent edit_uri would be automatically set as src/default/docs/ (note the src path and default branch). To use a different URI than the default (for example a different branch), simply set the edit_uri to your desired string. If you do not want any \"edit URL link\" displayed on your pages, then set edit_uri to an empty string to disable the automatic setting. Warning On GitHub and GitLab, the default \"edit\" path ( edit/master/docs/ ) opens the page in the online editor. This functionality requires that the user have and be logged in to a GitHub/GitLab account. Otherwise, the user will be redirected to a login/signup page. Alternatively, use the \"blob\" path ( blob/master/docs/ ) to open a read-only view, which supports anonymous access. Question ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. $$ \\frac{n!}{k!(n-k)!} = \\binom{n}{k} $$ def somefunction(): pass Inline code some = \"thing\" Bluesky Original instructions state: conda install pyqt numpy scipy matplotlib pandas pip install msgpack pyzmq pygame pyqtwebengine Found it easier to have environment.yml file instead. # This file may be used to create an environment using: # $ conda env create --name <env> --file <this file> # platform: linux-64 name: nats channels: - conda-forge dependencies: - python=3.6 - pyqt - numpy - scipy - matplotlib - pandas - pip: - msgpack - pyzmq - pygame - pyqtwebengine - pyopengl - pyopengl-accelerate conda env create -q && conda activate nats Now that dependencies are install for both Bluesky & Bluebird, we can at least check that these are OK by running check.py inside the Bluesky repository. Running python bluesky/check.py will produce the following output: (nats) $$ python bluesky/check.py This script checks the availability of the libraries required by BlueSky, and the capabilities of your system. Checking for numpy [OK] Checking for scipy [OK] Checking for matplotlib [OK] Checking for pyqt [QT5] Checking for pyopengl [OK] OpenGL module version is [3.1.0] Checking GL capabilities [OK] GL Version at least 3.3 [OK] Supported GL version [4.1] Checking for pygame pygame 1.9.6 Hello from the pygame community. https://www.pygame.org/contribute.html [OK] You have all the required libraries to run BlueSky. You can use both the QTGL and the pygame versions. Checking bluesky modules StateBasedCD: using Python version. Could not import pyclipper, RESO SSD will not function Using Open Aircraft Performance (OpenAP) model Successfully loaded all BlueSky modules. Start BlueSky by running BlueSky.py. The above command only checks the dependencies for Bluesky, if it was indeed successful, we can now install Bluesky into the Python path with: (nats) $$ python setup.py install From here, all the necessary items should be installed, Bluesky can now be launched with: (nats) $$ python bluesky/Bluesky.py Documentation The documentation for this project can be found at <www.placeholder-website-name.com> . Alternatively one can build and view these locally if one has mkdocs installed. To do this, in the top level of this repository, run: mkdocs serve The corresponding readthedocs can be found on localhost:8000 NOTE. If files are removed from 'docs/' in between builds, they make still hang around, a better command to run would be: mkdocs build --clean followed by mkdocs serve","title":"Releases"},{"location":"releases/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Danger This is a note Tip This is a tip This is an admonition box without a title. This is the example for Caution admonition. Caution This is the example for Caution admonition. Note On a few known hosts (specifically GitHub, Bitbucket and GitLab), the edit_uri is derived from the 'repo_url' and does not need to be set manually. Simply defining a repo_url will automatically populate the edit_uri configs setting. For example, for a GitHub- or GitLab-hosted repository, the edit_uri would be automatically set as edit/master/docs/ (Note the edit path and master branch). For a Bitbucket-hosted repository, the equivalent edit_uri would be automatically set as src/default/docs/ (note the src path and default branch). To use a different URI than the default (for example a different branch), simply set the edit_uri to your desired string. If you do not want any \"edit URL link\" displayed on your pages, then set edit_uri to an empty string to disable the automatic setting. Warning On GitHub and GitLab, the default \"edit\" path ( edit/master/docs/ ) opens the page in the online editor. This functionality requires that the user have and be logged in to a GitHub/GitLab account. Otherwise, the user will be redirected to a login/signup page. Alternatively, use the \"blob\" path ( blob/master/docs/ ) to open a read-only view, which supports anonymous access. Question ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. $$ \\frac{n!}{k!(n-k)!} = \\binom{n}{k} $$ def somefunction(): pass Inline code some = \"thing\"","title":"Project layout"},{"location":"releases/#bluesky","text":"Original instructions state: conda install pyqt numpy scipy matplotlib pandas pip install msgpack pyzmq pygame pyqtwebengine Found it easier to have environment.yml file instead. # This file may be used to create an environment using: # $ conda env create --name <env> --file <this file> # platform: linux-64 name: nats channels: - conda-forge dependencies: - python=3.6 - pyqt - numpy - scipy - matplotlib - pandas - pip: - msgpack - pyzmq - pygame - pyqtwebengine - pyopengl - pyopengl-accelerate conda env create -q && conda activate nats Now that dependencies are install for both Bluesky & Bluebird, we can at least check that these are OK by running check.py inside the Bluesky repository. Running python bluesky/check.py will produce the following output: (nats) $$ python bluesky/check.py This script checks the availability of the libraries required by BlueSky, and the capabilities of your system. Checking for numpy [OK] Checking for scipy [OK] Checking for matplotlib [OK] Checking for pyqt [QT5] Checking for pyopengl [OK] OpenGL module version is [3.1.0] Checking GL capabilities [OK] GL Version at least 3.3 [OK] Supported GL version [4.1] Checking for pygame pygame 1.9.6 Hello from the pygame community. https://www.pygame.org/contribute.html [OK] You have all the required libraries to run BlueSky. You can use both the QTGL and the pygame versions. Checking bluesky modules StateBasedCD: using Python version. Could not import pyclipper, RESO SSD will not function Using Open Aircraft Performance (OpenAP) model Successfully loaded all BlueSky modules. Start BlueSky by running BlueSky.py. The above command only checks the dependencies for Bluesky, if it was indeed successful, we can now install Bluesky into the Python path with: (nats) $$ python setup.py install From here, all the necessary items should be installed, Bluesky can now be launched with: (nats) $$ python bluesky/Bluesky.py","title":"Bluesky"},{"location":"releases/#documentation","text":"The documentation for this project can be found at <www.placeholder-website-name.com> . Alternatively one can build and view these locally if one has mkdocs installed. To do this, in the top level of this repository, run: mkdocs serve The corresponding readthedocs can be found on localhost:8000 NOTE. If files are removed from 'docs/' in between builds, they make still hang around, a better command to run would be: mkdocs build --clean followed by mkdocs serve","title":"Documentation"},{"location":"testing/","text":"Testing","title":"Testing"},{"location":"testing/#testing","text":"","title":"Testing"},{"location":"troubleshooting/","text":"Troubleshooting","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"user-guide/getting-started-II/","text":"","title":"Getting Started Part Deux"},{"location":"user-guide/getting-started/","text":"Quick Start This is a guide to get up and running as quick as possible","title":"Getting Started"},{"location":"user-guide/getting-started/#quick-start","text":"This is a guide to get up and running as quick as possible","title":"Quick Start"}]}